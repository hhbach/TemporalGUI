<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" initialize="maximizeWindows()"  windowResize="generateTickNumbers(event)" backgroundColor="0xF0FFFF">
	<fx:Style source="TemporalGUI.css"/>
	
	

	<fx:Declarations>
		<s:Sequence id="movePanelRight" target="{mSidePanel}" duration="300">
			<s:Move xTo="200"/>
		</s:Sequence>
		
		<s:Sequence id="movePanelLeft" target="{mSidePanel}" duration="300">
			<s:Move xTo="-200"/>
		</s:Sequence>
	</fx:Declarations>
	

	<s:Scroller left="0" top="30" height="100%" width="100%">


		
	<s:Group id="myGroup" left="10"  width="100%" height="100%" >

		<mx:Canvas id="worldLineTime" backgroundColor="#979795" height="20" width="100%" alpha=".5" left="20" horizontalScrollPolicy="off" />
		<mx:Canvas id="worldLineTick" backgroundColor="#979795" height="20" y="22" width="100%" alpha=".5" initialize="generateTicks()" left="20"/>
		<mx:Canvas  id="drawCanvas" y="50">
		</mx:Canvas>

	</s:Group>
	</s:Scroller>
	
	
	<mx:MenuBar id="myMenuBar" x="0" y="3" width="100%" itemClick="insertTemplate(event)"
				labelField="@label" textAlign="left">
		<fx:XMLList>
			<menuitem label="File">
				<menuitem label="New Project"/>
				<menuitem label="Generate Temporal"/>
			</menuitem>
			<menuitem label="Edit">
				<menuitem label = "group">
					<menuitem label="merge"/>
					<menuitem label="break"/>
				</menuitem>
			</menuitem>
			<menuitem label="Insert">
				<menuitem label="New Template" id="newTemplate" />
			</menuitem>
			<menuitem label="View"/>
			<menuitem label="Help">
				<menuitem label="SubMenuItem D-1" 
						  type="radio" groupName="one"/>
				<menuitem label="SubMenuItem D-2" 
						  type="radio" groupName="one"
						  selected="true"/>
				<menuitem label="SubMenuItem D-3" 
						  type="radio" groupName="one"/>
			</menuitem>
		</fx:XMLList>
	</mx:MenuBar>
	
	<mx:Slider id="mySlider" right="10" bottom="10" width="166" height="20"
			   change="scaleGroup();generateTickNumbers(event)" labels="[.01X, 3X]" liveDragging="true" maximum="3"
			   minimum=".01" value="1" creationComplete="generateTickNumbers(event); generateTicks(); createSidePanel(event); createGroupPanel(event)">
	</mx:Slider>

	
	
	
	<fx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			import mx.containers.Panel;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.events.MenuEvent;
			import mx.utils.object_proxy;
			
			import spark.primitives.Rect;
				
			

			
			private var yPositionPointer:int = 60;
			
			
			public var selectedPanel:int;
			public var templateArray:Array = new Array();
			public var movePanelDown:Sequence;
			public var movePanelUp:Sequence;
			
			
			[Bindable]
			public var mSidePanel:SidePanel;
			public var mGroupPanel:GroupPanel;
			
			public function insertTemplate(event:MenuEvent):void //function for  inserting new template
			{

				
				if (event.item.@data != "top") {
					if(event.item.@label == "New Template"){ //when New Template Button is clicked

						addNewTemplate();
						
					}
					
					if(event.item.@label == "New Project"){//when New Project Button is clicked
						for(var i2:int; i2 < templateArray.length; i2++){
							templateArray.pop();
						}
						drawCanvas.removeAllElements();
						drawCanvas.graphics.clear();
						yPositionPointer = 0;
					}
					
					if(event.item.@label == "merge")
					{
						startDownMove();
					}
					
				}
			}
			
//--------------------------------------------------------------------------------------------------Adding new template and child templates
			
			public function addNewTemplate():void
			{
				var myTemplate:Template = new Template(); //making template
				myTemplate.templateID = yPositionPointer/200;
				myTemplate.y = yPositionPointer;
				myTemplate.settingsImage.addEventListener(MouseEvent.CLICK, startRightMoveSide);
				myTemplate.xImage.addEventListener(MouseEvent.CLICK, addChildPanel);
				
				
				templateArray.push(myTemplate);
				drawCanvas.addElement(myTemplate);
				yPositionPointer = yPositionPointer + 200;	
			}


			
			public function addChildPanel(event:Event):void{ //adds triangle
				

				var myTemplate:Template = Template(event.target.parent.parent.parent);
				var parentID:int = myTemplate.templateID;
				
				
				var newTemplate:Template = new Template();
				newTemplate.y = templateArray[parentID].y + 200;
				newTemplate.x = myTemplate.getNSec() + templateArray[parentID].getOffSet();
				newTemplate.settingsImage.addEventListener(MouseEvent.CLICK, startRightMoveSide);
				newTemplate.templateID = yPositionPointer/200;
				newTemplate.setOffSet(myTemplate.getNSec());
				
				templateArray.splice(parentID+1, 0, newTemplate);
				repositionTemplates(parentID+1);
				drawCanvas.addElement(newTemplate);
				
				/*
				drawCanvas.graphics.beginFill(0xFFCC00);
				drawCanvas.graphics.moveTo(drawCanvas.mouseX,templateArray[parentID].y+templateArray[parentID].height);
				drawCanvas.graphics.lineTo(newTemplate.x + 25,newTemplate.y + 90);
				drawCanvas.graphics.lineTo(newTemplate.x+ 35, newTemplate.y+90);
				drawCanvas.graphics.lineTo(drawCanvas.mouseX,templateArray[parentID].y+templateArray[parentID].height);
				*/
				
				yPositionPointer = yPositionPointer + 200;	
				
			}
			

			public function repositionTemplates(a:int):void
			{
				for(var i:int = a+1; i < templateArray.length; i++)
				{
					var currentTemplate:Template = templateArray[i];	
					var mSequence:Sequence = new Sequence();
					var mMove:Move = new Move();
					
					
					mMove.yFrom = currentTemplate.y;
					mMove.yTo = currentTemplate.y + 200;
					
					mSequence.addChild(mMove);
					
					mSequence.target = currentTemplate;
					
					mSequence.play();
					
					
				}
				
				for(var i:int = 0; i < templateArray.length ; i++)
					{
						var currentTemplate:Template = templateArray[i];	
						currentTemplate.setTemplateID(i);
					}
			}
			

			
			//--------------------------------------------------------------------world Line ticks and scrolls
			public function generateTickNumbers(event:Event):void
			{	
				worldLineTime.removeAllChildren();
				var i:int;
				while(i <width)
				{
					var myTextField:Label = new Label();
					var tempValue:int = i/(10*mySlider.value);
					myTextField.text = tempValue.toString();
					myTextField.x = i-10;
					worldLineTime.addElement(myTextField);
					i = i + 100;	
				}
				
			}
			
			public function generateTicks():void
			{
				var i:int;
				while(i < width)
				{
					worldLineTick.graphics.lineStyle(1, 0x990000, .75);
					worldLineTick.graphics.beginFill(0x00FF00);
					
					worldLineTick.graphics.moveTo(i, worldLineTick.height); 
					worldLineTick.graphics.lineTo(i, worldLineTick.height - 10);
					
					i = i + 100;	
				}
				
				i = 0;
				while(i < width)
				{
					worldLineTick.graphics.lineStyle(1, 0x990000, .75);
					worldLineTick.graphics.beginFill(0x00FF00);
					
					worldLineTick.graphics.moveTo(i, worldLineTick.height); 
					worldLineTick.graphics.lineTo(i, worldLineTick.height - 5);
					i = i + 10;	
				}
			}
			
			public function scaleGroup():void //when the slider is dragged
			{
				drawCanvas.scaleX = mySlider.value;
				drawCanvas.scaleY = mySlider.value;
				worldLineTime.left = 20*mySlider.value;
				worldLineTick.left = 20*mySlider.value;
			}
			
			//----------------------------------------------------------------Group Panel Controls
			
			public function createGroupPanel(event:Event):void
			{
				mGroupPanel = new GroupPanel();
				mGroupPanel.y = -600;
				mGroupPanel.oKB.addEventListener(MouseEvent.CLICK, startLeftMoveSide);
				
				this.addElement(mGroupPanel);
				
				movePanelDown = new Sequence();
				movePanelDown.target = mGroupPanel;
				var downMove:Move = new Move();
				downMove.yTo = 100;
				movePanelDown.addChild(downMove);
				
				movePanelUp = new Sequence();
				var upMove:Move = new Move();
				movePanelUp.target = mGroupPanel;
				upMove.yTo = -600;
				
				movePanelUp.addChild(upMove);
				
			}
			
			public function startDownMove():void{
				movePanelDown.play();
				//selectedPanel = myTemplate.templateID;
				//mSidePanel.setPanel(templateArray[selectedPanel]);
			}
			
			public function startUpMove(event:Event):void{
				movePanelLeft.play();
			}
			
			
			//----------------------------------------------------------------Side Panel Controls
			

			
			
			public function createSidePanel(event:Event):void
			{
				mSidePanel = new SidePanel();
				mSidePanel.x = -200;
				mSidePanel.oKB.addEventListener(MouseEvent.CLICK, startLeftMoveSide);
				mSidePanel.cB.addEventListener(MouseEvent.CLICK, startLeftMoveSide);
				this.addElement(mSidePanel);
			}
			
			
			public function startRightMoveSide(event:Event):void{
				var myTemplate:Template = Template(event.target.parent.parent.parent);
				movePanelRight.play();
				selectedPanel = myTemplate.templateID;
				mSidePanel.setPanel(templateArray[selectedPanel]);
			}
			
			public function startLeftMoveSide(event:Event):void{
				movePanelLeft.play();
			}


			
			//----------------------------------------------------------------groupPanelControl
			
			
			public function maximizeWindows():void{ //needed for maximizing windows to fit to screen
				nativeWindow.maximize();
				
				
			}
			
			
			

		]]>
	</fx:Script>
	

</s:WindowedApplication>
